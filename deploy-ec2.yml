---
- name: Create VPC, Gateway, Subnet, Route, Security Group, KeyPair, EC2 instance and DNS record
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: "{{ vpcname }}"
        cidr_block: "{{ cidrvpc }}"
        region: "{{ awsregion }}"
        state: present
      register: vpc
    - debug: { msg: "{{ vpc }}" }

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        region: "{{ awsregion }}"
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: igw_result
    - debug: msg="{{ igw_result }}"

    - name: Create subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ cidrsubnet }}"
        region: "{{ awsregion }}"
        state: present
      register: subnet
    - debug: { msg: "{{ subnet }}" }

    - name: Create Route to Internet Gateway
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ awsregion }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        state: present
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_result.gateway_id }}"
        tags:
          Name: "{{ vpcname }}"
      register: igw
    - debug: { msg: "{{ igw }}" }

    - name: Create Security Group
      amazon.aws.ec2_security_group:
        name: "{{ sgname }}"
        region: "{{ awsregion }}"
        description: Security group for SSH ingress
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
              - 443
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg_result
    - debug: { msg: "{{ sg_result }}" }

    - name: Create EC2 Key Pair
      amazon.aws.ec2_key:
        name: "{{ keyname }}"
        region: "{{ awsregion }}"
        state: present
        file_name: "{{ lookup('env', 'HOME') }}/.ssh/{{ keyname }}.pem"
      register: keypair_result
    - debug: { msg: "{{ keypair_result }}" }

    - name: Launch EC2 instance
      ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ keyname }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ sgname }}"
        network:
          assign_public_ip: True
        image_id: "{{ image_id }}"
        region: "{{ awsregion }}"
        state: present
      register: ec2_instance
    - debug: { msg: "{{ ec2_instance }}" }

    - name: Add host entry to SSH config
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.ssh/config"
        append_newline: True
        prepend_newline: True
        block: |
          Host {{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}
            HostName {{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}
            User {{ ansible_user }}
            IdentityFile {{ lookup('env', 'HOME') }}/.ssh/{{ keyname }}.pem

    - name: Add newly created host to current running inventory
      add_host:
        hostname: "{{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"

    - name: Create {{ record-type }} DNS record for {{ host }}.{{ domain_name }} pointing to {{ record }}
      uri:
        url: "https://api.cloudns.net/dns/add-record.json"
        method: POST
        return_content: yes
        body_format: form-urlencoded
        body:
          auth-id: "{{ cloudns_user }}"
          auth-password: "{{ cloudns_pass }}"
          domain-name: "{{ domain_name }}"
          record-type: "{{ record_type }}"
          host: "{{ host }}"
          record: "{{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"
          ttl: 3600
      register: api_response
      tags: [ dns ]
    - debug: { msg: "{{ api_response }}" }


- name: Install nginx
  become: True
  hosts: "{{ hostvars['localhost']['ec2_instance']['instances'][0]['network_interfaces'][0]['association']['public_ip'] }}"
  tasks:
    - ansible.builtin.wait_for:
        port: 22
        delay: 10

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install NGINX
      apt:
        name: nginx
        state: present

    - name: Start Nginx
      service:
        name: nginx
        state: started
        enabled: yes
      register: srvc
#    - debug: { msg: "{{ srvc }}" }

- name: Deploy this presentation to the newly setup host
  hosts: "{{ hostvars['localhost']['ec2_instance']['instances'][0]['network_interfaces'][0]['association']['public_ip'] }}"
  become: yes

  tasks:
    - name: Remove default HTML folder
      ansible.builtin.file:
        path: /var/www/html
        state: absent

    - name: Clone repository into default HTML folder location
      git:
        repo: https://github.com/ardavanhashemzadeh/ansible-unch-n-learn.git
        dest: /var/www/html
        force: yes

    - name: Set permissions for the cloned directory
      ansible.builtin.file:
        path: /var/www/html
        owner: www-data
        group: www-data