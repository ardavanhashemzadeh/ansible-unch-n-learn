---

- name: SUPERSET | Ensure superset group
  group:
    name: "{{ superset_group }}"
    system: yes
    state: present

- name: SUPERSET | Ensure superset user
  user:
    name: "{{ superset_user }}"
    group: "{{ superset_group }}"
    system: yes
    shell: "{{ superset_shell }}"
    createhome: "{{ superset_createhome }}"
    home: "{{ superset_user_home }}"

- name: SUPERSET | Ensure airflow skeleton paths
  file:
    path: "{{ item }}"
    owner: "{{ superset_user }}"
    group: "{{ superset_group }}"
    state: directory
  with_items: "{{ superset_skeleton_paths }}"

- name: SUPERSET | Copy profile.d file
  template:
    src: superset-profile.d-file.j2
    dest: "/etc/profile.d/superset.sh"
    mode: 0644

- name: SUPERSET | Installing dependencies
  apt:
    pkg: "{{ superset_required_libs }}"
    state: present
    update_cache: yes

- name: SUPERSET | Installing required global pip packages
  package:
    name: "python3-{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
  with_items: "{{ superset_global_required_pip_packages }}"

- name: SUPERSET | Check virtualenv
  stat:
    path: "{{ superset_python_path }}"
  register: virtualenv_check

- name: SUPERSET | Set a virtualenv
  become: true
  become_user: "{{ superset_user }}"
  command: "virtualenv -p python{{ superset_python_version | default(omit) }} ."
  args:
    chdir: "{{ superset_app_home }}"
  when: not virtualenv_check.stat.exists or superset_force_reinstall

- name: SUPERSET | Installing Superset Python dependencies
  become: true
  become_user: "{{ superset_user }}"
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    virtualenv: "{{ superset_app_home }}"
    virtualenv_python: "python{{ superset_python_version | default(omit) }}"
  with_items: "{{ superset_required_python_packages }}"
  when: superset_required_python_packages is defined
  notify:
    - superset initialize db
    - "restart {{ superset_services.app.service_name }}"
    - "restart {{ superset_services.celery_flower.service_name }}"
    - "restart {{ superset_services.celery_worker.service_name }}"
    - "restart {{ superset_services.celery_beat.service_name }}"

- name: SUPERSET | Re-Installing superset on force reinstall
  become: true
  become_user: "{{ superset_user }}"
  pip:
    name: "{{ superset_package }}"
    version: "{{ superset_version }}"
    virtualenv: "{{ superset_virtualenv_path }}"
    virtualenv_python: "python{{ superset_python_version }}"
    state: "forcereinstall"
  when: superset_force_reinstall
  notify:
    - "restart {{ superset_services.app.service_name }}"

- name: SUPERSET | Installing superset
  become: true
  become_user: "{{ superset_user }}"
  pip:
    name: "{{ superset_package }}"
    version: "{{ superset_version }}"
    state: present
    virtualenv: "{{ superset_app_home }}"
    virtualenv_python: "python{{ superset_python_version | default(omit) }}"
  register: superset_install
  notify:
    - "restart {{ superset_services.app.service_name }}"
  when: not superset_force_reinstall

- name: SUPERSET | Installing required libs of superset db drivers
  apt:
    pkg: "{{ item.required_libs | default(omit) }}"
    state: present
  with_items: "{{ superset_db_drivers }}"
  when: superset_db_drivers is defined
  notify:
    - "restart {{ superset_services.app.service_name }}"
    - "restart {{ superset_services.celery_flower.service_name }}"
    - "restart {{ superset_services.celery_worker.service_name }}"
    - "restart {{ superset_services.celery_beat.service_name }}"

- name: SUPERSET | Installing superset db drivers
  become: true
  become_user: "{{ superset_user }}"
  pip:
    name: "{{ item.1.name }}"
    version: "{{ item.1.version | default(omit) }}"
    virtualenv: "{{ superset_app_home }}"
    virtualenv_python: "python{{ superset_python_version }}"
  with_subelements:
    - "{{ superset_db_drivers }}"
    - package
  when: superset_db_drivers is defined
  notify:
    - superset initialize db
    - "restart {{ superset_services.app.service_name }}"
    - "restart {{ superset_services.celery_flower.service_name }}"
    - "restart {{ superset_services.celery_worker.service_name }}"
    - "restart {{ superset_services.celery_beat.service_name }}"


- name: SUPERSET | Installing additional superset packages
  become: true
  become_user: "{{ superset_user }}"
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    virtualenv: "{{ superset_app_home }}"
    virtualenv_python: "python{{ superset_python_version }}"
  with_items: "{{ superset_additional_python_packages }}"
  register: pipadditional
  when: superset_additional_python_packages is defined
  notify:
    - superset initialize db
    - "restart {{ superset_services.app.service_name }}"
    - "restart {{ superset_services.celery_flower.service_name }}"
    - "restart {{ superset_services.celery_worker.service_name }}"
    - "restart {{ superset_services.celery_beat.service_name }}"
